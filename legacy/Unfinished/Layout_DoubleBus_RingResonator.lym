<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Layout_DoubleBus_RingResonator</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.exlayout_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# Layout_DoubleBus_RingResonator

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file creates a layout for testing a double-bus ring resonator.

uses:
 - the SiEPIC EBeam GDS Library
 - the SiEPIC EBeam PCell Library
it does:
 - creates the layout in the presently selected cell
 - deletes everything first

Version history:

Lukas Chrostowski           2015/11/10
 - Initial version

Lukas Chrostowski           2015/11/15
 - fix for Python 3.4: print ("xxx")

Lukas Chrostowski           2016/06/11
 - for loop with defined device parameters

"""

# 
# Python script to create a layout for testing a double-bus ring resonator.
# uses:
#  - the SiEPIC EBeam GDS Library
#  - the SiEPIC EBeam PCell Library
# creates the layout in the presently selected cell
# deletes everything first

import pya

pol = 'te'

if pol == 'te':
  sweep_radius = [3, 3, 3, 3, 10, 10, 10, 10]
  sweep_gap    = [0.05, 0.08, 0.1, 0.12, 0.05, 0.1, 0.15, 0.20]
  x_offset = 67
else:
  sweep_radius = [30, 30, 30, 30, 30, 30, 30, 30, 30]
  sweep_gap    = [0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.60, 0.65]
  x_offset = 67

# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = 1 / ly.dbu

# clean all cells within "cell"
ly.prune_subcells(cell.cell_index(), 10)
#delete_extra_top_cells(cell)

# Layer mapping:
LayerSi = pya.LayerInfo(1, 0)
LayerSiN = cell.layout().layer(LayerSi)
fpLayer = pya.LayerInfo(99, 0)
fpLayerN = cell.layout().layer(fpLayer)
TextLayer = pya.LayerInfo(10, 0)
TextLayerN = cell.layout().layer(TextLayer)

# Draw floor plan
cell.shapes(fpLayerN).insert(pya.Box(0,0, 610*dbu, 405*dbu))

# Create a sub-cell for our Ring resonator layout
top_cell = cell
cell = cell.layout().create_cell("RingResonator")
if pol == 'te':
  t = pya.Trans(pya.Trans.R0, 40 * dbu, 12 * dbu)
else:
  t = pya.Trans(pya.Trans.R180, 560 * dbu, 393 * dbu)
# place "cell" in the top cell
top_cell.insert(pya.CellInstArray(cell.cell_index(), t))


# Import cells from the SiEPIC GDS Library, and instantiate them

# Grating couplers, Ports 1, 2, 3, 4 (top-down):
GC_imported = ly.create_cell("ebeam_gc_%s1550" % pol, "SiEPIC-EBeam").cell_index()
print ("Cell: GC_imported: #%s" % GC_imported)
gc_length = 41

if pol == 'te':
  wg_bend_radius = 5
else:
  wg_bend_radius = 15

for i in range(len(sweep_gap)):
  
  # place layout at location:
  x = i * x_offset
  r = sweep_radius[i]
  g = sweep_gap[i]

  t = pya.Trans(pya.Trans.R0, x*dbu, 0)
  cell.insert(pya.CellInstArray(GC_imported, t, pya.Point(0,127*dbu), pya.Point(0,0), 4, 1))

  # Label for automated measurements, laser on Port 2, detectors on Ports 1, 3, 4
  t = pya.Trans(x*dbu, 127*2*dbu)
  text = pya.Text ("opt_in_%s_1550_device_RingDouble%sr%sg%s" % (pol.upper(), pol.upper(),r,int(round(g*1000))), t)
  shape = cell.shapes(TextLayerN).insert(text)
  shape.text_size = 3*dbu

  # Ring resonator PCell
  wg_width = 0.5
  pcell = ly.create_cell("DirectionalCoupler_HalfRing_Straight", "SiEPIC-EBeam PCells", { "r": r, "w": wg_width, "g": g, "silayer": LayerSi, "bustype": 0 } )
  print ("Cell: pcell: #%s" % pcell.cell_index())
  y_ring = 127*3/2
  if 2*r &lt; (gc_length+wg_bend_radius):
    t1 = pya.Trans(pya.Trans.R270, (x+wg_bend_radius) * dbu, y_ring * dbu) 
    t2 = pya.Trans(pya.Trans.R90, (x+wg_bend_radius+2*r+2*g+2*wg_width) * dbu, y_ring * dbu) 
  else:
    t1 = pya.Trans(pya.Trans.R90, (x+wg_bend_radius) * dbu, y_ring * dbu) 
    t2 = pya.Trans(pya.Trans.R270, (x+wg_bend_radius-2*r-2*g-2*wg_width) * dbu, y_ring * dbu) 
  instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t1))
  instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t2))

  # Create paths for waveguides

  # GC3 to bottom-left of ring
  points = [ [0, 127], [wg_bend_radius,127], [wg_bend_radius, y_ring-1*r-1.5*wg_width] ] 
  start_point = [ x, 0 ]
  layout_waveguide_rel(cell, LayerSi, start_point, points, wg_width, wg_bend_radius)

  # GC2 to top-left of ring
  points = [ [wg_bend_radius,y_ring+r+1.5*wg_width], [wg_bend_radius, 127*2], [0,127*2] ] 
  layout_waveguide_rel(cell, LayerSi, start_point, points, wg_width, wg_bend_radius)

  # GC1 to top-right of ring
  # GC4 to bottom-right of ring
  if 2*r &lt; (gc_length+wg_bend_radius):
    points_gc1 = [ [0, 127*3], [wg_bend_radius+2*r+2*g+2*wg_width,127*3], [wg_bend_radius+2*r+2*g+2*wg_width, y_ring+r+1.5*wg_width] ] 
    points_gc4 = [ [0, 0], [wg_bend_radius+2*r+2*g+2*wg_width,0], [wg_bend_radius+2*r+2*g+2*wg_width, y_ring-1*r-1.5*wg_width]  ] 
  else:
    points_gc1 = [ [0, 127*3], [wg_bend_radius+2*r+2*g+2*wg_width,127*3], [wg_bend_radius+2*r+2*g+2*wg_width, y_ring+r+1.5*wg_width] ] 
    points_gc1 = [ [0, 127*3], [wg_bend_radius,127*3], [wg_bend_radius, 127*3-2*wg_bend_radius], 
            [(wg_bend_radius-2*r-2*g-2*wg_width), 127*3-2*wg_bend_radius],
            [(wg_bend_radius-2*r-2*g-2*wg_width), 127*3-y_ring-1*r-1.5*wg_width]  ] 
    points_gc4 = [ [0, 0], [wg_bend_radius,0], [wg_bend_radius, 2*wg_bend_radius], 
            [(wg_bend_radius-2*r-2*g-2*wg_width), 2*wg_bend_radius],
            [(wg_bend_radius-2*r-2*g-2*wg_width), y_ring-1*r-1.5*wg_width]  ] 
  layout_waveguide_rel(cell, LayerSi, start_point, points_gc1, wg_width, wg_bend_radius)
  layout_waveguide_rel(cell, LayerSi, start_point, points_gc4, wg_width, wg_bend_radius)

pcell = ly.create_cell("LumericalINTERCONNECT_Detector", "SiEPIC", { "number": 2 } )
t = pya.Trans(pya.Trans.R0, -20*dbu, 127*1 * dbu) 
instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t))

pcell = ly.create_cell("LumericalINTERCONNECT_Detector", "SiEPIC", { "number": 3 } )
t = pya.Trans(pya.Trans.R0, -20*dbu, 127*0 * dbu) 
instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t))

pcell = ly.create_cell("LumericalINTERCONNECT_Laser", "SiEPIC", { "npoints": 5000 } )
t = pya.Trans(pya.Trans.R0, -20*dbu, 127*2 * dbu) 
instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t))

pcell = ly.create_cell("LumericalINTERCONNECT_Detector", "SiEPIC", { "number": 1 } )
t = pya.Trans(pya.Trans.R0, -20*dbu, 127*3 * dbu) 
instance = cell.insert(pya.CellInstArray(pcell.cell_index(), t))


print ("done layout...")
</text>
</klayout-macro>
