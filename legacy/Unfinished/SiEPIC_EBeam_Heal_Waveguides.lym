<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: Heal waveguides</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut>H</shortcut>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Heal_Waveguides

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file implements the healing of waveguides, if components have been moved

- Each time a path is converted to a waveguide, the "optical_waveguides" database is updated
- User selects a waveguide that needs healing
- Function will:
 - See if this waveguide is in the waveguide database "optical_waveguides" (from verification)
   by comparing the selected Instance versus the "optical_waveguides" database
  - If not, convert to Path, then back to Waveguide again, so it snaps to the closest component pin
  - If yes, move the beginning/end waveguide segments to match the original pin.


-- Maybe this should be Heal_Components?
     namely, move all components that have been disconnected?  probably not... (GCs..)

 
Version history:

Lukas Chrostowski           2015/11/15
 - initial concept
Lukas Chrostowski           2015/12/9
 - starting to work on it. getting stuck with finding Instance for objects found through shapes iter.


"""

import numpy


# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
ly = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if ly == None:
  raise Exception("No layout")
# find the currently selected cell:
cell = pya.Application.instance().main_window().current_view().active_cellview().cell
if cell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = ly.dbu

# Define layers based on PDK_functions:
LayerSiN = ly.layer(LayerSi)
LayerPinRecN = ly.layer(LayerPinRec)
LayerDevRecN = ly.layer(LayerDevRec)
LayerFbrTgtN = ly.layer(LayerFbrTgt)
LayerErrorN = ly.layer(LayerError)


# Record a transaction, to enable "undo"
lv.transaction("Heal Waveguide")

print("------------------ Heal Waveguide --------------")

# Find the selected objects
object_selection = lv.object_selection   # returns ObjectInstPath[].


for o in object_selection:
  # Find the selected waveguides

  is_waveguide = False

  if o.is_cell_inst():
    print("Selected object is a cell.")
    oinst = o.inst()
    if oinst.is_pcell():
      c = oinst.cell
      if c.basic_name() in Waveguide_Types and c.pcell_parameters_by_name()['layer'] == LayerSi:
        print("Selected object is a guiding shape path, in cell %s on LayerSi." % c.basic_name() )
        is_waveguide = True
        trans = oinst.trans

  elif o.shape:
    print("Selected object is a shape.")
    c = o.shape.cell
    if c.basic_name() in Waveguide_Types and c.is_pcell_variant() and c.pcell_parameters_by_name()['layer'] == LayerSi:
      # we have a waveguide GUIDING_LAYER selected
      print("Selected object is a Waveguide in %s on LayerSi." % c.basic_name() )
      trans = o.source_trans().s_trans()
      o_instpathlen = o.path_length()
      oinst = o.path_nth(o_instpathlen-1).inst()
      is_waveguide = True

  # We now have a waveguide ROUND_PATH PCell, with variables: o (ObjectInstPath), oinst (Instance), c (Cell)
  if is_waveguide == True:
  
    # look in the optical_waveguides database to see if this is an existing waveguide
    if 1:
      
      pass
    else:
      # not in database.
      # convert to Path, then back to Waveguide again.
      # this is not necessary if we update the optical_waveguides database each time we add a waveguide.
      pass
      
     
# Record a transaction, to enable "undo"
lv.commit()

if not(is_waveguide):
  v = pya.MessageBox.warning("No waveguide selected", "No waveguide selected.\nPlease select a waveguide. \nIt will get healed (aligned to original pin).", pya.MessageBox.Ok)
else:
  # Update the net list. Used for future waveguide healing operation.
  optical_waveguides, optical_components = netlist_extraction(topcell)[:2]
</text>
</klayout-macro>
