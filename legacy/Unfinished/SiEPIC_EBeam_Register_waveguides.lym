<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>SiEPIC: Register waveguides (for future Healing)</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_Register_waveguides

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file searches the layout, and creates a waveguide database "optical_waveguides_registered".
This database is used for future waveguide-heal operations.

Lukas Chrostowski           2015/11/15
 - intial version

"""

# Define layers based on PDK_functions:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []

# Search the layout for the components and waveguides:
print("* calling find_all_components() - DevRec")
find_all_components(topcell, LayerDevRecN, LayerPinRecN, LayerFbrTgtN)
print("* calling find_all_waveguides()")
find_all_waveguides(topcell, LayerSiN)

# Search the arrays to identify all the nets:
identify_all_nets(optical_pins, optical_waveguides, optical_components)

# Save the optical_waveguides for future heal operations
optical_waveguides_registered = optical_waveguides


</text>
</klayout-macro>
