<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Automated A* waveguide routing</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>siepic_menu.layout_submenu.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>


# Python script
# A* algorithm for waveguide path generation

"""
This file is part of the SiEPIC_EBeam_PDK
by Jaspreet Jhoja (c) 2015

This Python file takes an input for start and end point coordinates and generates an optimal path without crossing or overlapping the existing waveguides.

uses:
 - the SiEPIC EBeam GDS Library
 - the SiEPIC EBeam PCell Library

Version history:

Jaspreet Jhoja 		2015/12/24 - 2016/02/13
- Implemented Manhattan routing for the sparse points.
- The user may experience some bugs at this stage eg. Broken waveguides

Jaspreet Jhoja 		2015/12/24 - 2015/12/29
- Optimised for designs with multiple waveguides.
- Applied optimisation filter to remove overlapping path points.
- Filter also smoothens hard vertices.

Jaspreet Jhoja 		2015/12/13
- Does not use any external libraries

Jaspreet Jhoja          2015/12/9- 2015/12/11
- Uses visible graph to navigate through the mesh.
- Improved speed and solution time.

Jaspreet Jhoja          2015/12/03
 - Takes Manual coordinate input, if no coordinates are set,
    then the script automatically extract coordinates from the 
     start_pt and end_pt text.      
 - Allow input for desired gap between waveguides
 - only works for waveguide width of 500nm 
 -  usually takes 10-15 seconds, depending on the complexity of the obstacle
 
"""

# 
# Python script to create a layout for testing a double-bus ring resonator.
# uses:
#  - the SiEPIC EBeam GDS Library
#  - the SiEPIC EBeam PCell Library
# deletes everything first
#be patient, usually it takes around 14-15 seconds depending on the complexity of the obstacles

from collections import deque
import pya
import sys, ast, copy, operator, heapq, time, string, collections
from math import sqrt
from collections import deque
global opened, closed, child_nodes, listtoget, barred_points, gap, restricted_points


opened = [] # stores all the generated but yet to visit nodes
closed = [] #stores all the visited nodes
child_nodes = [] # stores all the child nodes
barred_points = [] #points on 1d lines which are already taken
starting_pt=[0, 0]  #starting X and Y coordinates
goal_pt = [0,0]  #Goal C and Y coordinates
wg_points = [] #list containing all the final backtracked path points



def find_points(topcell, LayerTextN):
  t = []
  dbu = topcell.layout().dbu
  iter = topcell.begin_shapes_rec(LayerTextN)
  i=0
  while not(iter.at_end()):
    if iter.shape().is_text():
      text = iter.shape().text
      if text.string.find("start_pt")  &gt;  -1:
        i+=1
        text2 = iter.shape().text.transformed(iter.itrans())
        t.append([text2.x, text2.y])
      if text.string.find("end_pt")  &gt;  -1:
        i+=1
        text2 = iter.shape().text.transformed(iter.itrans())
        t.append([text2.x, text2.y])
    iter.next()

  return t

if(starting_pt == goal_pt):
  topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
  LayerTextN = topcell.layout().layer(LayerText)
  t = find_points(topcell, LayerTextN)
  starting_pt = t[1]
  goal_pt = t[0]



# Configure variables to draw structures in the presently selected cell:
lv = pya.Application.instance().main_window().current_view()
if lv == None:
  raise Exception("No view selected")
# Find the currently selected layout.
layout = pya.Application.instance().main_window().current_view().active_cellview().layout() 
if layout == None:
  raise Exception("No layout")
cv = pya.Application.instance().main_window().current_view().active_cellview()
# find the currently selected cell:

if topcell == None:
  raise Exception("No cell")
# fetch the database parameters
dbu = layout.dbu

# Define layers based on PDK_functions:
LayerSiN = layout.layer(LayerSi)
LayerTextN = layout.layer(LayerText)
LayerPinRecN = layout.layer(LayerPinRec)
LayerDevRecN = layout.layer(LayerDevRec)
LayerFbrTgtN = layout.layer(LayerFbrTgt)
LayerErrorN = layout.layer(LayerError)
LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)
LayerSi = pya.LayerInfo(1, 0)
#LayerSiN = cell.layout().layer(LayerSi)
fpLayer = pya.LayerInfo(99, 0)
#fpLayerN = cell.layout().layer(fpLayer)
TextLayer = pya.LayerInfo(10, 0)
#TextLayerN = cell.layout().layer(TextLayer)

# Clear the previous errors:
clear_ErrorLayer(topcell, LayerErrorN)


############################################################################
####  PHASE -1 : Extract points which are already taken ####################
############################################################################

# initialize the arrays to keep track of layout objects
reset_Optical_classes()
optical_components = []
optical_waveguides = []
optical_pins = []
optical_nets = []

# Create a Results Database
rdb_i = lv.create_rdb("SiEPIC_Verification")
rdb = lv.rdb(rdb_i)
rdb.top_cell_name = topcell.name
rdb_cell = rdb.create_cell(topcell.name)

# Search the layout for the components and waveguides:
# Search the arrays to identify all the nets:
optical_waveguides, optical_components, clock_find_all_components, clock_find_all_waveguides, clock_identify_all_nets \
  = netlist_extraction(topcell)

b_points = []  #list containing extracted waveguide points and their widths
for i in optical_waveguides:
  converted_points = i.points
  b_points.append([i.wg_width*1e3,converted_points])

bar_points = []

for i in b_points:
  a = []
  for j in i[1]:
    a.append([round(float(j[0]*1e-3),2), round(float(j[1]*1e-3),2)])
  bar_points.append(a)
  
temp_points = bar_points
width = 0.5
barred_points = [] #list used to store obstacle points which will get used to generate polygons
shell = []# points that will actually get used
shell_pt=[]
add = 3

#The following loop generates vertices to be used in sparse graph
for l in temp_points:
    a= l
    m=[]
    n = []
    for i in range(0,len(a),1):
        if(i &gt; 0):
            if(a[i][0]==a[i-1][0]):
                if((a[i-1][1]-a[i][1]) &gt; 0):#08 00
                    p =[a[i][0],a[i][1]-add]
                    q =[a[i-1][0],a[i-1][1]+add]
                elif((a[i-1][1]-a[i][1]) &lt; 0):
                    p =[a[i][0],a[i][1]+add]
                    q =[a[i-1][0],a[i-1][1]-add]
                if(len(m) &gt;= 1):
                    p[0] = m[i-1][0]
                    q[0] = m[i-1][0]
            elif(a[i][1] == a[i-1][1]):
                if((a[i][0]-a[i-1][0]) &gt; 0):#00 90
                    p =[a[i][0]+add,a[i][1]]
                    q =[a[i-1][0]-add,a[i-1][1]]
                elif((a[i][0]-a[i-1][0]) &lt; 0):
                    p =[a[i][0]-add,a[i][1]]
                    q =[a[i-1][0]+add,a[i-1][1]]
                if(len(m) &gt;= 1):
                    p[1] = m[i-1][1]
                    q[1] = m[i-1][1]                    
            if(a[i-1] not in n):
                m.append(q)
                n.append(a[i-1])
            if(a[i] not in n):
                m.append(p)
                n.append(a[i])
    shell.append(m)

########### FUNCTION for CHECKING IF A POINT INTERSECTS ###############
    
class Point:
	def __init__(self,x,y):
		self.x = x
		self.y = y

def ccw(A,B,C):
	return (C.y-A.y)*(B.x-A.x)  &gt;  (B.y-A.y)*(C.x-A.x)

def intersect(A,B,C,D):
	return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)	
	
########### FUNCTION for GENERATING LINE BOUNDS ####################
    
def generateBounds(list_pt, width):
    empty_list=[]
    for j in list_pt:
        a= j
        n = []
        m=[]
        p=[]
        q=[]
        r=[]
        s=[]
        for i in range(len(a)):
            if(i &gt; 0):
                if(a[i][0]==a[i-1][0]):
                    if((a[i-1][1]-a[i][1]) &lt; 0):#checked
                        p =[a[i-1][0]+width,a[i-1][1]]
                        q =[a[i-1][0]-width,a[i-1][1]]
                        if(i == len(a)-1):
                                r =[a[i][0]+width,a[i][1]]
                                s =[a[i][0]-width,a[i][1]]
                        else:                            
                            try:
                                if(a[i+1][0]-a[i][0] &gt; 0):
                                    r =[a[i][0]+width,a[i][1]-width]
                                    s =[a[i][0]-width,a[i][1]+width]
                                elif(a[i+1][0]-a[i][0] &lt; 0):
                                    r =[a[i][0]-width,a[i][1]-width]
                                    s =[a[i][0]+width,a[i][1]+width]
                            except Exceptions as e:
                                None                                
                    elif((a[i-1][1]-a[i][1]) &gt; 0):#checked
                        p =[a[i-1][0]+width,a[i-1][1]]
                        q =[a[i-1][0]-width,a[i-1][1]]
                        if(i == len(a)-1):
                                r =[a[i][0]+width,a[i][1]]
                                s =[a[i][0]-width,a[i][1]]
                        else:                            
                            try:
                                if(a[i+1][0]-a[i][0] &gt; 0):
                                    r =[a[i][0]+width,a[i][1]-width]
                                    s =[a[i][0]-width,a[i][1]+width]
                                elif(a[i+1][0]-a[i][0] &lt; 0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                            except Exceptions as e:
                                None
                elif(a[i][1] == a[i-1][1]):#checked
                    if((a[i-1][0]-a[i][0]) &gt; 0):#08 00
                        p =[a[i-1][0],a[i-1][1]-width]
                        q =[a[i-1][0],a[i-1][1]+width]
                        if(i == len(a)-1):
                                r =[a[i][0],a[i][1]-width]
                                s =[a[i][0],a[i][1]+width]
                        else:                            
                            try:
                                if(a[i+1][1]-a[i][1] &gt; 0):
                                    r =[a[i][0]-width,a[i][1]-width]
                                    s =[a[i][0]+width,a[i][1]+width]
                                elif(a[i+1][1]-a[i][1] &lt; 0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                            except Exceptions as e:
                                None                                
                    elif((a[i-1][0]-a[i][0]) &lt; 0):#checked
                        p =[a[i-1][0],a[i-1][1]+width]
                        q =[a[i-1][0],a[i-1][1]-width]
                        if(i == len(a)-1):
                                r =[a[i][0],a[i][1]-width]
                                s =[a[i][0],a[i][1]+width]
                        else:                            
                            try:
                                if(a[i+1][1]-a[i][1] &gt; 0):
                                    r =[a[i][0]-width,a[i][1]+width]
                                    s =[a[i][0]+width,a[i][1]-width]
                                elif(a[i+1][1]-a[i][1] &lt; 0):
                                    r =[a[i][0]+width,a[i][1]+width]
                                    s =[a[i][0]-width,a[i][1]-width]
                            except Exceptions as e:
                                None                          
                if(p not in empty_list):
                    m.append(p)
                if(r not in empty_list):
                    m.append(r)
                if(q not in empty_list):
                    m.append(q)
                if(s not in empty_list):
                    m.append(s)    
                empty_list.append(m)
    return_list = []
    for i in empty_list:
        return_list = return_list + i        
    return return_list
    
shell= filter(None, shell)
shell_pt = generateBounds(shell, 5)#change this, higher the value, smoother the composition
temp_points = filter(None, temp_points)
points_for_mangen = copy.deepcopy(temp_points)
barred_points = generateBounds(temp_points, 1.5)#change this when waveguide seems incomplete
mangen_points = generateBounds(points_for_mangen, 1.5) #change this when waveguide is incomplete



mangen_bounds = [] #boundaries for manhattan points generation
                  #a polygon list did not work well
temp_mangen =[]
for i in mangen_points:
    a = []
    for j in mangen_points:
        if(i!= [] and j!=[]):
          if(i!=j):
              a=[]
              if((i[0]==j[0]) or (i[1] == j[1])):
                  a.append(i)
                  a.append(j)
                  temp_mangen.append(a)

for i in temp_mangen:
    a= [i[1],i[0]]
    if(i not in mangen_bounds and a not in mangen_bounds):
        mangen_bounds.append(i) 
        

    
polygon_list = []                  
p_list=[]                  
for i in barred_points:
    a = []
    for j in barred_points:
        if(i!= [] and j!=[]):
          if(i!=j):
              a=[]
              if((i[0]==j[0]) or (i[1] == j[1])):
                  a.append(i)
                  a.append(j)
                  p_list.append(a)

for i in p_list:
    a= [i[1],i[0]]
    if(i not in polygon_list and a not in polygon_list):
        polygon_list.append(i) 
#check intersection from polygon 
			
#check intersection from polygon list
#shell_pt has the points for vertices to check with intersection list
#This function is used to generate visible vertices
def getvisibleVertices(current):
    actual_points = []
    for k in shell_pt:
        if (k!=[]):
          currentpt = Point(current[0],current[1])
          kpt = Point(k[0], k[1])
          #currentpt to kpt
          valid = 1
          for l in polygon_list:
             pt1 = Point(l[0][0], l[0][1])
             pt2 = Point(l[1][0], l[1][1])
             if(intersect(currentpt, kpt, pt1, pt2) == True):
                 valid = 0
          if(valid == 1):
                 actual_points.append(k)
    return actual_points

#barred_points contains the data about the restricted areas  
###########################################################################  
############ PHASE -2 : DEFINING NODE AND A* Algorithm ####################
###########################################################################        

class AStar:
    def distBetween(self,current,neighbor, atype):
        if(atype == "solve"):
          distance = (abs(current[0]-neighbor[0]) + abs(current[1]-neighbor[1]))
        elif(atype == "search"):
          distance = sqrt(abs(current[0]-neighbor[0])**2 + abs(current[1]-neighbor[1])**2)
        return distance

    def heuristicEstimate(self,start,goal, atype):
        if(atype== "solve"):
          hvalue = (abs(start[0]-goal[0]) + abs(start[1]-goal[1]))#*1.001
        elif(atype == "search"):
          hvalue = sqrt(abs(start[0]-goal[0])**2 + abs(start[1]-goal[1])**2)
        return hvalue

    def neighborNodes(self,current, goal, atype):
          clist = []
          test = [Point(current[0], current[1]),Point(goal[0], goal[1])]
          find_vertices = 0
          for i in polygon_list:
                  pt1 = Point(i[0][0], i[0][1])
                  pt2 = Point(i[1][0], i[1][1])
                  if(intersect(test[0], test[1], pt1, pt2)== True):
                      find_vertices = 1
          if(find_vertices==1):
                  clist = getvisibleVertices(current)
          else:
                  clist = [goal]
          for i in clist:
                  gc = gScore[str(current)] + self.distBetween(current,i, atype)
                  gScore.update({str(i): gc})            
          return clist

    def reconstructPath(self,cameFrom,start, goal):
        try:
            global path
            path = deque()
            node = (goal)
            path.appendleft(node)
            while True:
                node = cameFrom[str(node)]
                path.appendleft(node)
                if(node == str(start)):
                    return path
        except Exception as e:
            None
    
    def getLowest(self,openSet,fScore):
        global lowest
        lowest = float("inf")
        lowestNode = None
        for node in openSet:
            if fScore[str(node)]  &lt;  lowest:
                lowest = fScore[str(node)]
                lowestNode = node
        return lowestNode

    def aStar(self,start,goal, atype):
        global gScore, fScore, openSet, closedSet, current, cameFrom
        gScore =[]
        fScore = []
        cameFrom = {}
        openSet = set()
        openSet.add(str(start))
        closedSet = set()
        gScore = {}
        fScore = {}
        gScore.update({str(start): 0})
        fScore.update({str(start): 0})
        gScore[str(start)] = 0
        fScore[str(start)] = gScore[str(start)] + self.heuristicEstimate(start,goal,atype)
        while len(openSet) != 0:
            current = self.getLowest(openSet,fScore)
            current = ast.literal_eval(current)
            openSet.remove(str(current))
            closedSet.add(str(current))
            if current == goal:
                return self.reconstructPath(cameFrom,start,goal)
            for neighbor in self.neighborNodes(current,goal, atype):
                tentative_gScore = gScore[str(current)] + self.distBetween(current,neighbor, atype)
                if str(neighbor) in closedSet and tentative_gScore &gt;= gScore[str(neighbor)]:
                    continue
                if str(neighbor) not in closedSet or tentative_gScore  &lt;  gScore[str(neighbor)]:
                    cameFrom[str(neighbor)] = current
                    gScore[str(neighbor)] = tentative_gScore
                    fScore[str(neighbor)] = gScore[str(neighbor)] + self.heuristicEstimate(neighbor,goal, atype)
                    if str(neighbor) not in openSet:
                        openSet.add(str(neighbor))
        return "nothing found"

def startSearch(start, goal):
    global sparse_pt
    a=AStar()
    g =a.aStar(start,goal, "search")
    sparse_pt = []
    for i in path:
          point = list(i)
          point[0] = round(point[0],2)
          point[1] = round(point[1],2)
          if(i not in sparse_pt):
             sparse_pt.append(list(point))
  
def draw(layer_type): #This function is responsible for drawing on the star
        cell = pya.Application.instance().main_window().current_view().active_cellview().cell
        if(layer_type == "silicon"):
          L1 = layout_waveguide_abs(cell, LayerSi, wg_points , 0.5, 5)
        else:
          L1 = layout_waveguide_abs(cell, LayerTextN, wg_points , 0.5, 5)
a=AStar()
g = a.aStar([float(starting_pt[0]*1e-3),float(starting_pt[1]*1e-3)],[float(goal_pt[0]*1e-3),float(goal_pt[1]*1e-3)],"search")
#g = a.aStar([10,200],[110,190],"search")
b = path
final =[]
final_pt = []
for i in path:
  point = list(i)
  point[0] = round(point[0],2)
  point[1] = round(point[1],2)
  if(i not in final_pt):
    final_pt.append(list(point))
final_pt.reverse()
print ("here", final_pt)
for i in final_pt:
	spt = Point(starting_pt[0]*1e-3,starting_pt[1]*1e-3)
	cpt = Point(i[0], i[1])
	yes = 0
	for j in polygon_list:
		pt1 = Point(j[0][0], j[0][1])
		pt2 = Point(j[1][0], j[1][1])
		if(intersect(spt,cpt, pt1,pt2)):
			yes = 1
	if(yes == 1):
		final.append(i)
	else:
		final.append(i)
		final.append([starting_pt[0]*1e-3,starting_pt[1]*1e-3])
		break
wg_points = final

#final filter for unoptimal points
optimised_pts = []
wg_copy = []
for i in wg_points:
  wg_copy.append(i)
wg_copy.reverse()

links = []

def proof(ind1, ind2):
  global links
  intersection = 0
  i = wg_copy[ind1]
  j = wg_points[ind2]
  firstpt = Point(i[0], i[1])
  secondpt = Point(j[0], j[1])
  for k in polygon_list:
    pt1 = Point(k[0][0], k[0][1])
    pt2 = Point(k[1][0], k[1][1])
    if(intersect(firstpt, secondpt, pt1, pt2)==True):
      intersection = 1
  if(intersection == 0):
    links.append([i, j])
    if(i == wg_points[0] or j == wg_points[0]):
      return
    if(ind1+1 &lt;= len(wg_copy)-1):
      proof(ind1+1, ind2)
  else:
    proof(ind1, ind2-1)
proof(0, -1)

start = wg_points[-1]
end = wg_points[0]

def finalfilter(pt):
  first = pt
  second = []
  if(pt == start):
    return
  else:
    for i in links:
      if(i[0] == pt):
        second = i[1]
        if(first not in optimised_pts):
          optimised_pts.append(first)
        if(second not in optimised_pts):
          optimised_pts.append(second)
        finalfilter(second)

finalfilter(end)
#change optimised points to 3 significant figures
for i in range(len(optimised_pts)):
  optimised_pts[i][0] = round(optimised_pts[i][0], 2)
  optimised_pts[i][1] = round(optimised_pts[i][1], 2)
  
sparse_pts = copy.deepcopy(optimised_pts)
wg_points = optimised_pts

#############################
##MANHATTAN POINTS GENERATE##
#############################
def manint(input1, input2 ): #function for manhattan intersection
  base = Point(input1[0],input1[1])
  target = Point(input2[0], input2[1])
  for k in mangen_bounds:
    pt1 = Point(k[0][0], k[0][1])
    pt2 = Point(k[1][0], k[1][1])
    if(intersect(base, target, pt1, pt2)== True):
      return 1
  return 0

b_set = set(tuple(x) for x in mangen_points)   #convert set to tuple
barred_pts = [list(x) for x in b_set]         #convert tuple back to list
for i in barred_pts:
  if(i == []):
    barred_pts.remove(i)
add = []
man_points =[]
direction = "a"
def appendfunction(x):
  if(x not in man_points):
    man_points.append(x)
    
#print(sparse_pts, "THIS IS THE FINAL SPARSE GRAPH DATA")
for i in range(len(sparse_pts)):
  if(i &gt; 0):
    start = sparse_pts[i-1]
    end = sparse_pts[i]
    components = [[],[]]
    coordinates = [[],[]]
    x1 = start[0]
    y1 = start[1]
    x2 = end[0]
    y2 = end[1]
    try:
      slope = (y2-y1)/(x2-x1)
    except Exception:
      slope = "undefined"
    #STEP 1: Identify the x and y components
    for j in barred_pts:
      #CHECK X and add it to the x components list
      if(start[0]  &gt;  end[0]):
        if(j[0] &lt; start[0] and j[0] &gt; end[0]):
          components[0].append(j[0])
      elif(start[0] &lt;  end[0]):
        if(j[0] &gt; start[0] and j[0] &lt; end[0]):
          components[0].append(j[0])
      #CHECK Y and add it to the y components list
      if(start[1]  &gt;  end[1]):
        if(j[1] &lt; start[1] and j[1] &gt; end[1]):
          components[1].append(j[1])
      elif(start[1] &lt;  end[1]):
        if(j[1] &gt; start[1] and j[1] &lt; end[1]):
          components[1].append(j[1])
    
    #STEP 2: Generate coordinating points on the line
    #uses Y components and generate coordinates
    #find a way to solve the equations    
    for x in list(set(components[0])):
      y = (slope*x) +y2 -(slope*x2)
      coordinates[0].append([x,y]) 
    
    #Find X components and generate coordinates
    for y in list(set(components[1])):
      if(slope == "undefined"):
        x = x2
      else:
        x = x2 +((y-y2)/slope)
      coordinates[1].append([x,y])
    add.append(coordinates)#add it to the list
    nextpt = []
    #STEP 3: decide the coordinates and then add them to the list
    #if statement which check is we can move either way
    #start and end are the starting and final variables
    current_position = start
    previous_pt = []
    check =0
    try:
      
      while True:
    #          global bestx, besty, nextpt
          bestx =[]
          besty =[]
          if current_position == end:
            break
          xinstance = []
          yinstance = []
          
          xinstance = [end[0], start[1]] #instance where X is changed
          yinstance = [start[0], end[1]] # instance where Y is changed
          
          #manint(start,target)
          if(manint(start, xinstance)== 1 or manint(end, xinstance) == 1):
            xinstance = 0
          if(manint(start, yinstance)==1 or manint(end, yinstance) == 1):
            yinstance = 0
  
          #now compare and decide whether there is a need to evaluate
          #further or the x and y instances will be enough
          
          #if both instances are not intersected by any boundaries
  
          if(xinstance!=0 and yinstance!=0):
          #    print("both here", start, end, direction)
              if(abs(abs(current_position[0])-abs(xinstance[0])) &lt; abs(abs(current_position[1])- abs(yinstance[1]))):
                if(direction == "a"):
                  nextpt = xinstance
                elif(direction == "x+" and current_position[0] &lt; xinstance[0]):
                  nextpt = xinstance
                elif(direction == "x-" and current_position[0] &gt; xinstance[0]):
                  nextpt = xinstance
                else:
                  xinstance = 0
                  nextpt = yinstance
              else:
                if(direction == "a"):
                  nextpt = yinstance
                elif(direction == "y+" and current_position[1] &lt; xinstance[1]):
                  nextpt = yinstance
                elif(direction == "y-" and current_position[1] &gt; xinstance[1]):
                  nextpt = yinstance
                else:
                  yinstance = 0
                  nextpt = xinstance
           #   print nextpt
          
          #if only xinstance is available
          elif(xinstance !=0 and yinstance ==0):
          #      print("x here", start, end, direction)
                if(direction == "a" or direction == "y+" or direction == "y-"):
                  nextpt = xinstance
          # print current_position, xinstance, yinstance, nextpt, "start and end", start, end
                elif(direction == "x+" and current_position[0] &lt; xinstance[0]):
                  nextpt = xinstance
                elif(direction == "x-" and current_position[0] &gt; xinstance[0]):
                  nextpt = xinstance
                else:
                  xinstance = 0
          
          #if only yinstance is avialable
          elif(yinstance !=0 and xinstance ==0):
          #      print("y here", start, end, direction)
                if(direction == "a" or direction == "x+" or direction == "x-"):
                  nextpt = yinstance
          #  print current_position, xinstance, yinstance, nextpt, "start and end", start, end
                elif(direction == "y+" and current_position[1] &lt; yinstance[1]):
                  nextpt = yinstance
                elif(direction == "y-" and current_position[1] &gt; yinstance[1]):
                  nextpt = yinstance
                else:
                  yinstance = 0
          
          #if none of the instances are available then evaluate the
          #generated coordinates
        #  print "if none of them are here"
          if(xinstance == 0 and yinstance ==0):
          #  print("none here", start, end, direction)
            #look for best in x coordinate
            for j in coordinates[0]:
              if(manint(current_position,[j[0],current_position[1]])==0 and manint([j[0],current_position[1]],j)==0):
                if(bestx==[]):
                  bestx = j
                else:
                  if(abs(abs(current_position[0])-abs(j[0]))  &gt;  abs(abs(current_position[0])-abs(bestx[0])) and abs(abs(end[0])-abs(j[0]))  &lt;  abs(abs(end[0])-abs(bestx[0]))):
                    bestx = j
        
              coordinates[0].remove(bestx)
  
              
            for j in coordinates[1]:
              if(manint(current_position,[current_position[0], j[1]])==0 and manint([current_position[0], j[1]],j)==0):
                if(besty==[]):
                  besty = j
                else:
                  if(abs(abs(current_position[1])-abs(j[1]))  &gt;  abs(abs(current_position[1])-abs(besty[1])) and abs(abs(end[1])-abs(j[1]))  &lt;  abs(abs(end[1])-abs(besty[1]))):
                    besty = j
            
              coordinates[1].remove(besty)
  
            if(abs(abs(current_position[0])-abs(bestx[0]))  &gt;  abs(abs(current_position[1])-abs(besty[1])) and abs(abs(end[0])-abs(bestx[0]))  &lt;  abs(abs(end[1])-abs(besty[1]))):
                if(direction == "x+" and current_position[0] &lt; bestx[0]):
                  nextpt = bestx
                elif(direction == "x-" and current_position[0] &gt; bestx[0]):
                  nextpt = bestx
                elif(current_position[0] &gt;  bestx[0] and direction == "y+"):
                  nextpt = bestx
                elif(current_position[0] &gt;  bestx[0] and direction == "y-"):
                  nextpt = bestx               
                else:
                  nextpt = besty
            else:
                if(direction == "y+" and current_position[1] &lt; besty[1]):
                  nextpt = besty
                elif(direction == "y-" and current_position[1] &gt; besty[1]):
                  nextpt = besty
                elif(current_position[1] &gt;  besty[1] and direction == "x+"):
                  nextpt = besty
                elif(current_position[1] &gt;  bestx[1] and direction == "x-"):
                  nextpt = besty 
                else:
                  nextpt = bestx
          
          appendfunction(current_position)
          if(nextpt == bestx):
            current_position = [nextpt[0], current_position[1]]
            appendfunction(current_position)
            if(current_position[1] &lt; nextpt[1]):
              direction = "y+"
            else:
              direction = "y-"
            current_position = end
            appendfunction(current_position)
  
          elif(nextpt == xinstance):
              current_position = [nextpt[0], current_position[1]]
              appendfunction(current_position)
              if(current_position[1] &lt; end[1]):
                direction = "y+"
              else:
                direction = "y-"
              current_position = end
              appendfunction(current_position)
  
          elif(nextpt == besty):
            current_position = [current_position[0], nextpt[1]]
            appendfunction(current_position)
            if(current_position[0] &lt; nextpt[0]):
              direction = "x+"
            else:
              direction = "x-"
            current_position = end
            appendfunction(current_position)
            
          elif(nextpt == yinstance):
              current_position = [current_position[0],nextpt[1]]
              appendfunction(current_position)
              if(current_position[0] &lt; end[0]):
                direction = "x+"
              else:
                direction = "x-"
              current_position = end
              appendfunction(current_position)
    except Exception:
      None

#Filter to rectify errors
def optimise():
  for i in man_points:
    if(man_points.index(i) &gt; 0 and i!=man_points[-1]):
      current_index = man_points.index(i)
      a = man_points[current_index - 1]
      b = man_points[current_index + 1]
      if((i[0] == a[0] and i[0]==b[0]) or (i[1]==a[1] and i[1]==b[1])):
        man_points.remove(i)

optimise()
print(man_points)
wg_points = man_points
draw("silicon")


 </text>
</klayout-macro>
