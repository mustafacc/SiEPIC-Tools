<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description>Lumerical INTERCONNECT</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>true</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>false</show-in-menu>
 <group-name/>
 <menu-path/>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text># Python script
# SiEPIC_EBeam_functions

"""
This file is part of the SiEPIC_EBeam_PDK
by Lukas Chrostowski (c) 2015

This Python file extract the circuit netlist from the physical layout, saves it to Spice file, 
and launches Lumerical INTERCONNECT for circuit simulations.

Version history:

Lukas Chrostowski           2015/11/19
 - initial version
 - generating a Spice netlist including Optical Network Analyzer; launch Lumerical INTERCONNECT simulation

Zeqin Lu                    2016/2/18
 - Within Wafer Monte Carlo simulation
 
Jaspreet Jhoja              2016/03/18
 - Integrated the script with MC GUI
 - minor fixes for data parsing

Lukas Chrostowski           2016/04/19
 - Support for TM polarization in ONA gain

Jaspreet and Lukas             2016/05/01
 - Support for histograms of FSR, Gain and Wavelength

"""


def mc_interconnect(topcell, layout, dbu, datadict):
  global LayerSiN, LayerTextN, LayerPinRecN, LayerDevRecN, LayerFbrTgtN, LayerErrorN, LayerINTERCONNECTN, optical_components, optical_waveguides, optical_pins, optical_nets
  #global topcell, layout
  
  #imported field data
  print(datadict)
  
  import os
  print(os.name)
  
  import platform
  print(platform.system())
  print(platform.release())
  
  import sys
  version = sys.version
  
  import string
  
  SIMULATION = 2    #  INTERCONNECT simulation
  
  INTERCONNECT_VISUALIZER = 1  # Plot the data using the Lumerical visualizer, or a regular plot?
  
  #The following section is commented out as the script imports the topcell and layout from the GUI
  # find the currently selected cell:
  #topcell = pya.Application.instance().main_window().current_view().active_cellview().cell
  #if topcell == None:
  #  raise Exception("No cell")
  #layout = topcell.layout()
  #dbu = layout.dbu

  if pya.Application.instance().main_window().current_view() == None:
    raise Exception("Please create a layout before running a simulation.")

  lv = pya.Application.instance().main_window().current_view()
  if lv == None:
    raise Exception("No view selected")

  # Save the layout prior to running simulations, if there are changes.
  mw = pya.Application.instance().main_window()
  if mw.manager().has_undo():
    mw.cm_save()
  layout_filename = mw.current_view().active_cellview().filename()
  if len(layout_filename) == 0:
    raise Exception("Please save your layout before running the simulation")

  # initialize the arrays to keep track of layout objects
  optical_components = []
  optical_waveguides = []
  optical_pins = []
  optical_nets = []
  
  # Define layers based on the PDK:
  LayerSiN = layout.layer(LayerSi)
  LayerTextN = layout.layer(LayerText)
  LayerPinRecN = layout.layer(LayerPinRec)
  LayerDevRecN = layout.layer(LayerDevRec)
  LayerFbrTgtN = layout.layer(LayerFbrTgt)
  LayerErrorN = layout.layer(LayerError)
  LayerINTERCONNECTN = layout.layer(LayerINTERCONNECT)
  
  
  # extract the circuit netlist from the physical layout:
  optical_waveguides, optical_components = netlist_extraction(topcell)[:2]

  # Add the "disconnected" component to all disconnected pins
  optical_waveguides, optical_components = \
    terminate_all_disconnected_pins(optical_pins, optical_waveguides, optical_components)

  # Ask user whether to trim the netlist
  # Trim Netlist setting is saved in a "User Properties" defined via the Cells window.
  # if missing, a dialog is presented.
  Trim_Netlist_options = ['Export full circuit', 'Trim netlist by finding components connected to the Laser']
  Trim_Netlist = topcell.property("Trim_Netlist")
  if Trim_Netlist and Trim_Netlist in Trim_Netlist_options:
    print("Trim_Netlist {%s}, taken from cell {%s}" % (Trim_Netlist, topcell.name) )
  else:
    Trim_Netlist = pya.InputDialog.ask_item("Trim_Netlist", "Do you want to export the complete circuit, or trim the netlist?  \nYour preference will be saved as a user property in cell {%s}." % topcell.name, Trim_Netlist_options, 0)
    if Trim_Netlist == None:
      Trim_Netlist = Trim_Netlist_options[0]
    else:
      # Record a transaction, to enable "undo"
      lv.transaction("Trim_Netlist selection")
      print("Trim_Netlist taken from the InputDialog = %s; for next time, saved in cell {%s}." % (Trim_Netlist, topcell.name) )
      topcell.set_property("Trim_Netlist", Trim_Netlist)
      lv.commit()
    
  # Output the Spice netlist:
  if Trim_Netlist == Trim_Netlist_options[0]:
    text_Spice, text_Spice_main, num_detectors = generate_Spice_file(topcell, optical_waveguides, optical_components, optical_pins)
  else:
    text_Spice, text_Spice_main, num_detectors = generate_short_spice_files(topcell, optical_waveguides, optical_components, optical_pins)

  print(text_Spice)
  
  if sys.platform.startswith("win"):
  
    folder_name = app.application_data_path()
    if not os.path.isdir(folder_name+'/tmp'):
      os.makedirs(folder_name+"/tmp")
    filename = folder_name + '/tmp/%s_main.spi' % topcell.name
    filename_subckt = folder_name + '/tmp/%s.spi' % topcell.name
    filename2 = folder_name + '/tmp/%s.lsf' % topcell.name
  else: 
  
    filename = '/tmp/%s_main.spi' % topcell.name
    filename_subckt = '/tmp/%s.spi' % topcell.name
    filename2 = '/tmp/%s.lsf' % topcell.name
  
  text_Spice_main += '.INCLUDE %s\n\n' % (filename_subckt)

  # Write the Spice netlist to file
  file = open(filename, 'w')
  file.write (text_Spice_main)
  file.close()
  file = open(filename_subckt, 'w')
  file.write (text_Spice)
  file.close()

  
  # Write the Lumerical INTERCONNECT start-up script.
  file = open(filename2, 'w')
  text_lsf = '###DEVELOPER:Zeqin Lu, zqlu@ece.ubc.ca, University of British Columbia \n' 
  
  text_lsf += 'switchtolayout;\n'
  text_lsf += 'deleteall;\n'
  text_lsf += 'importnetlist("%s");\n' % filename
  text_lsf += 'addproperty("::Root Element", "wafer_uniformity_thickness", "wafer", "Matrix");\n' 
  text_lsf += 'addproperty("::Root Element", "wafer_uniformity_width", "wafer", "Matrix");\n' 
  text_lsf += 'addproperty("::Root Element", "N", "wafer", "Number");\n'  
  text_lsf += 'addproperty("::Root Element", "selected_die", "wafer", "Number");\n' 
  text_lsf += 'addproperty("::Root Element", "wafer_length", "wafer", "Number");\n'   
  text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_thickness", "wafer", "Matrix");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_uniformity_width", "wafer", "Matrix");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_grid", "wafer", "Number");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_x", "wafer", "Number");\n'  % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_resolution_y", "wafer", "Number");\n' % topcell.name
  text_lsf += 'addproperty("::Root Element::%s", "MC_non_uniform", "wafer", "Number");\n'  % topcell.name
  text_lsf += 'select("::Root Element::%s");\n'  % topcell.name
  text_lsf += 'set("MC_non_uniform",99);\n'  
  text_lsf += 'n_wafer = %s;  \n'  % datadict["number_of_wafer"]  #  GUI INPUT: Number of testing wafer
  text_lsf += 'n_die = %s;  \n'  % datadict["number_of_die"]  #  GUI INPUT: Number of testing die per wafer
  text_lsf += 'kk = 1;  \n'
  text_lsf += 'select("ONA_1");\n'
  text_lsf += 'num_points = get("number of points");\n'
  
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += 'mc%s = matrixdataset("mc%s"); # initialize visualizer data, mc%s \n' % (i+1, i+1, i+1)
      text_lsf += 'Gain_Data_input%s = matrix(num_points,n_wafer*n_die);  \n' % (i+1) 
  ###Define histograms datasets
  if(datadict["hist_fsr"]==True):
    text_lsf += 'fsr_dataset = matrix(1,n_wafer*n_die,1);\n'
  if(datadict["hist_wavelength"]==True):
    text_lsf += 'freq_dataset = matrix(1,n_wafer*n_die,1);\n'
  if(datadict["hist_gain"]==True):
    text_lsf += 'gain_dataset = matrix(1,n_wafer*n_die,1);\n'
  
  
  text_lsf += '#Run Monte Carlo simulations; \n'
  text_lsf += 'for (jj=1; jj&lt;=n_wafer; jj=jj+1) {   \n'
  ############################## Wafer generation ###########################################
  text_lsf += 'wafer_length = %s;  \n'  % datadict["wafer_length_x"]  # [m], GUI INPUT: wafer length
  text_lsf += 'wafer_cl_width = %s;  \n' % datadict["within_wafer_correlation_width"]  # [m],  GUI INPUT: wafer correlation length
  text_lsf += 'wafer_cl_thickness = %s;  \n' % datadict["within_wafer_correlation_thickness"]  # [m],  GUI INPUT: wafer correlation length  
  text_lsf += 'wafer_clx_width = wafer_cl_width;  \n'  
  text_lsf += 'wafer_cly_width = wafer_cl_width; \n'   
  text_lsf += 'wafer_clx_thickness = wafer_cl_thickness;  \n'  
  text_lsf += 'wafer_cly_thickness = wafer_cl_thickness; \n'  
  text_lsf += 'N = 500;  \n'        
  text_lsf += 'wafer_grid=wafer_length/N; \n'   
  text_lsf += 'wafer_RMS_w = %s;     \n' % datadict["within_wafer_width"] # [nm], GUI INPUT: Within wafer Sigma RMS for width
  text_lsf += 'wafer_RMS_t = %s;   \n' % datadict["within_wafer_thickness"]    # [nm], GUI INPUT: Within wafer Sigma RMS for thickness
  text_lsf += 'x = linspace(-wafer_length/2,wafer_length/2,N); \n'
  text_lsf += 'y = linspace(-wafer_length/2,wafer_length/2,N); \n'
  text_lsf += 'xx = meshgridx(x,y) ;  \n'
  text_lsf += 'yy = meshgridy(x,y) ;  \n'
  text_lsf += 'wafer_Z_thickness = wafer_RMS_t*randnmatrix(N,N);  \n'
  #text_lsf += 'wafer_F_thickness = exp(-(abs(xx)/(wafer_clx_thickness/2)+abs(yy)/(wafer_cly_thickness/2))); \n' # exponential filter
  #text_lsf += 'wafer_uniformity_thickness = real( 2*wafer_length/N/sqrt(wafer_clx_thickness*wafer_cly_thickness)*invfft(fft(wafer_Z_thickness,1,0)*fft(wafer_F_thickness,1,0), 1, 0)  );  \n' # wafer created using exponential filter
  text_lsf += 'wafer_F_thickness = exp(-(xx^2/(wafer_clx_thickness^2/2)+yy^2/(wafer_cly_thickness^2/2))); \n'  # Gaussian filter
  text_lsf += 'wafer_uniformity_thickness = real( 2/sqrt(pi)*wafer_length/N/sqrt(wafer_clx_thickness)/sqrt(wafer_cly_thickness)*invfft(fft(wafer_Z_thickness,1,0)*fft(wafer_F_thickness,1,0), 1, 0)  );    \n' # wafer created using Gaussian filter 
  
  text_lsf += 'wafer_Z_width = wafer_RMS_w*randnmatrix(N,N);  \n'
  #text_lsf += 'wafer_F_width = exp(-(abs(xx)/(wafer_clx_width/2)+abs(yy)/(wafer_cly_width/2))); \n' # exponential filter
  #text_lsf += 'wafer_uniformity_width = real( 2*wafer_length/N/sqrt(wafer_clx_width*wafer_cly_width)*invfft(fft(wafer_Z_width,1,0)*fft(wafer_F_width,1,0), 1, 0)  );  \n' # wafer created using exponential filter
  text_lsf += 'wafer_F_width = exp(-(xx^2/(wafer_clx_width^2/2)+yy^2/(wafer_cly_width^2/2))); \n'  # Gaussian filter
  text_lsf += 'wafer_uniformity_width = real( 2/sqrt(pi)*wafer_length/N/sqrt(wafer_clx_width)/sqrt(wafer_cly_width)*invfft(fft(wafer_Z_width,1,0)*fft(wafer_F_width,1,0), 1, 0)  );    \n' # wafer created using Gaussian filter 
  
  ######################## adjust Wafer mean ###################
  text_lsf += 'mean_RMS_t = %s; # [nm]  \n'   % datadict["wafer_sigma_thickness"]  # [nm],   GUI INPUT: wafer mean Sigma RMS for thickness
  text_lsf += 'mean_RMS_w = %s; # [nm]  \n'   % datadict["wafer_sigma_width"]  # [nm],   GUI INPUT: wafer mean Sigma RMS for width
  text_lsf += 'wafer_uniformity_thickness = wafer_uniformity_thickness + randn(0,mean_RMS_t); \n'
  text_lsf += 'wafer_uniformity_width = wafer_uniformity_width + randn(0,mean_RMS_w); \n'
  
  ##################################### pass wafer to Root ###################
  text_lsf += '#pass wafers to object \n'
  text_lsf += 'select("::Root Element");  \n' 
  text_lsf += 'set("wafer_uniformity_thickness", wafer_uniformity_thickness);  \n'
  text_lsf += 'set("wafer_uniformity_width", wafer_uniformity_width);  \n'
  text_lsf += 'set("N",N);  \n'
  text_lsf += 'set("wafer_length",wafer_length);  \n'
  
  #################################### embed wafer selection script in Root ###################
  text_lsf += 'select("::Root Element");\n'
  text_lsf += 'set("setup script",'+ "'" +  ' \n'
  text_lsf += '######################## high resolution interpolation for dies ################# \n'
  text_lsf += 'MC_grid = 5e-6;  \n'   # [m], mesh grid
  text_lsf += 'die_span_x = %s; \n'  % datadict["die_length_x"]  # [m]    GUI INPUT: die length X
  text_lsf += 'die_span_y = %s; \n'  % datadict["die_length_y"]  # [m]    GUI INPUT: die length Y
  text_lsf += 'MC_resolution_x = die_span_x/MC_grid;  \n'
  text_lsf += 'MC_resolution_y = die_span_y/MC_grid;  \n'
  text_lsf += 'die_num_x = floor(wafer_length/die_span_x); \n'
  text_lsf += 'die_num_y = floor(wafer_length/die_span_y); \n'
  text_lsf += 'die_num_total = die_num_x*die_num_y; \n'
  text_lsf += 'x = linspace(-wafer_length/2,wafer_length/2,N); \n'
  text_lsf += 'y = linspace(-wafer_length/2,wafer_length/2,N); \n'
              # pick die for simulation, and do high resolution interpolation 
  text_lsf += 'j=selected_die; \n'
  text_lsf += 'die_min_x = -wafer_length/2+(j-1)*die_span_x -floor((j-1)/die_num_x)*wafer_length; \n'
  text_lsf += 'die_max_x = -wafer_length/2+j*die_span_x -floor((j-1)/die_num_x)*wafer_length; \n'
  text_lsf += 'die_min_y = wafer_length/2-ceil(j/die_num_y)*die_span_y; \n'
  text_lsf += 'die_max_y = wafer_length/2-(ceil(j/die_num_y)-1)*die_span_y; \n'
  text_lsf += 'x_die = linspace(die_min_x, die_max_x, MC_resolution_x); \n'
  text_lsf += 'y_die = linspace(die_min_y, die_max_y, MC_resolution_y); \n'
  text_lsf += 'die_xx = meshgridx(x_die,y_die) ;  \n'
  text_lsf += 'die_yy = meshgridy(x_die,y_die) ;  \n'
  text_lsf += 'MC_uniformity_thickness = interp(wafer_uniformity_thickness, x, y, x_die, y_die); # interpolation \n'
  text_lsf += 'MC_uniformity_width = interp(wafer_uniformity_width, x, y, x_die, y_die); # interpolation \n'

  
  ######################### pass die to object ####################################
  text_lsf += 'select("::Root Element::%s");  \n' % topcell.name
  text_lsf += 'set("MC_uniformity_thickness",MC_uniformity_thickness);  \n'
  text_lsf += 'set("MC_uniformity_width",MC_uniformity_width);  \n'
  text_lsf += 'set("MC_resolution_x",MC_resolution_x);  \n'
  text_lsf += 'set("MC_resolution_y",MC_resolution_y);  \n'
  text_lsf += 'set("MC_grid",MC_grid);  \n'
  text_lsf += 'set("MC_non_uniform",1);  \n'
  text_lsf += "'"+'); \n'
  
  text_lsf += 'for (ii=1;  ii&lt;=n_die; ii=ii+1) {   \n'
  text_lsf += '  switchtodesign; \n'
  text_lsf += '  setnamed("ONA_1","peak analysis", "single");\n'
  text_lsf += '  select("::Root Element");  \n'
  text_lsf += '  set("selected_die",ii);  \n'
  text_lsf += '  run;\n'
  text_lsf += '  select("ONA_1");\n'
#  text_lsf += '  f_start = get("start frequency");\n'
#  text_lsf += '  f_stop = get("stop frequency");\n'
#  text_lsf += '  num_points = get("number of points");\n'
#  text_lsf += '  wavelength = c/f_start : (c/f_stop-c/f_start)/(num_points-1) : c/f_stop;\n'
  text_lsf += '  T=getresult("ONA_1","input 1/mode 1/transmission");\n'
  text_lsf += '  wavelength = T.wavelength;\n'   
  
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += '  if (kk==1) { mc%s.addparameter("wavelength",wavelength);} \n' % (i+1) 
      text_lsf += '  mc%s.addattribute("run", getattribute( getresult("ONA_1", "input %s/mode 1/gain"), getattribute(getresult("ONA_1", "input %s/mode 1/gain")) ) );\n' % (i+1, i+1, i+1)
      text_lsf += '  Gain_Data_input%s(1:num_points, kk) = getattribute( getresult("ONA_1", "input %s/mode 1/gain"), getattribute(getresult("ONA_1", "input %s/mode 1/gain")) ); \n'  % (i+1, i+1, i+1)
  else:
    text_lsf += '  gain = getattribute( getresult("ONA_1","input 1/mode 1/gain"), getattribute(getresult("ONA_1", "input %s/mode 1/gain")) );\n' %( i+1)
    text_lsf += '  plot(wavelength,gain);\n'
    text_lsf += '  holdon;\n'
    
#add simulation data to their corresponding datalists  
  if(datadict["hist_fsr"]==True):
      text_lsf += 'fsr_select = getresult("ONA_1", "input 1/mode 1/peak/free spectral range");\n'
      text_lsf += 'fsr_dataset(1,kk) = real(fsr_select.getattribute("TE free spectral range (m)"));\n'

  if(datadict["hist_wavelength"]==True):
      text_lsf += 'freq_dataset(1,kk) = getresult("ONA_1", "input 1/mode 1/peak/frequency");\n'

  if(datadict["hist_gain"]==True):
      text_lsf += 'gain_select = getresult("ONA_1", "input 1/mode 1/peak/gain");\n'
      text_lsf += 'gain_dataset(1,kk) = real(gain_select.getattribute("TE gain (dB)"));\n'

  text_lsf += '  switchtodesign; \n'
  text_lsf += 'kk = kk + 1;  \n'
  text_lsf +=   '}\n'   # end for wafer iteration
  text_lsf += '}\n'  # end for die iteration
  text_lsf += '?"Spectrum data for each input can be found in the Script Workspace tab:";\n'    
  for i in range(0, num_detectors): 
      text_lsf += '?"Gain_Data_input%s"; \n' %(i+1)
  text_lsf += '?"Plot spectrums using script: plot(wavelength, Gain_Data_input#)";\n'  
  if INTERCONNECT_VISUALIZER:
    for i in range(0, num_detectors):
      text_lsf += 'visualize(mc%s);\n' % (i+1)
  
#### Display Histograms for the selected components
#FSR
  if(datadict["hist_fsr"]==True):
      text_lsf += 'dataset = fsr_dataset*1e9;\n'  #select fsr dataset defined above
      text_lsf += 'bin_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n' #define number of bins according to the number of data
      text_lsf += 'histc(dataset, bin_hist, "Free Spectral Range (nm)", "Count", "Histogram - FSR");\n' #generate histogram 
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n' #define plot legends
      
#wavelength
  if(datadict["hist_wavelength"]==True):
      text_lsf += 'dataset = freq_dataset*1e9;\n'
      text_lsf += 'num_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n'
      text_lsf += 'histc(dataset, bin_hist, "Wavelength (nm)", "Count", "Histogram - Peak wavelength");\n'
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n'

#Gain
  if(datadict["hist_gain"]==True):
      text_lsf += 'dataset = gain_dataset;\n'
      text_lsf += 'num_hist = max( [ 10, (max(dataset)-min(dataset)) / std(dataset) * 10 ]);\n'
      text_lsf += 'histc(dataset, bin_hist, "Gain (dB)", "Count", "Histogram - Peak gain");\n'
      text_lsf += 'legend("Mean: " + num2str(mean(dataset)) + ", Std Dev: " + num2str(std(dataset)));\n'

  file.write (text_lsf)
  file.close()
  
  print(text_lsf)
  
  if sys.platform.startswith('linux'):
    # Linux-specific code here...
    if string.find(version,"2.") &gt; -1:
      import commands
      print("Running INTERCONNECT")
      commands.getstatusoutput('/opt/lumerical/interconnect/bin/interconnect -run %s' % filename2)
  
  elif sys.platform.startswith('darwin'):
    # OSX specific
    if string.find(version,"2.7.") &gt; -1:
      import commands
      print("Running INTERCONNECT")
      #commands.getstatusoutput('open /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args %s' % filename)
      commands.getstatusoutput('source ~/.bash_profile; open -n /Applications/Lumerical/INTERCONNECT/INTERCONNECT.app --args -run %s' % filename2)
  
  elif sys.platform.startswith('win'):
    # Windows specific code here
    import subprocess
    print("Running INTERCONNECT")
    
    #check Interconnect installation directory
    file_path_a = 'C:\\Program Files\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
    file_path_b = 'C:\\Program Files (x86)\\Lumerical\\INTERCONNECT\\bin\\interconnect.exe'
  
    if(os.path.isfile(file_path_a)==True):
      subprocess.Popen(args=[file_path_a, '-run', filename2], shell=True)
    
    elif(os.path.isfile(file_path_b)==True):
      subprocess.Popen(args=[file_path_b, '-run', filename2], shell=True)
  
    else:
      warning_window = pya.QMessageBox()
      warning_window.setText("Warning: The program could not find INTERCONNECT.")
      warning_window.setInformativeText("Do you want to specify it manually?")
      warning_window.setStandardButtons(pya.QMessageBox.Yes | pya.QMessageBox.Cancel);
      warning_window.setDefaultButton(pya.QMessageBox.Yes)
      response = warning_window.exec_()        
      if(response == pya.QMessageBox.Yes):
        dialog = pya.QFileDialog()
        path = str(dialog.getOpenFileName())
        path = path.replace('/', '\\')
        subprocess.Popen(args=[path, '-run', filename2], shell=True)
</text>
</klayout-macro>
